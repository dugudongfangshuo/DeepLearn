# Generated 2021-05-06 from:
# E:\python\SER\recipe\Librispeech_enhancement\train.yaml
# yamllint disable
# #################################
# Basic training parameters for enhancement.
#
# Authors:
#  * Szu-Wei Fu 2020
#  * Chien-Feng Liao 2020
#  * Peter Plantinga 2020, 2021
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 4234
__set_seed: !!python/object/apply:torch.manual_seed [4234]

# Set up folders for reading from and writing to
# Dataset will be downloaded to the `data_folder`
# If you plan to train a system on an HPC cluster with a big dataset,
# we strongly suggest doing the following:
# 1- Compress the dataset in a single tar or zip file.
# 2- Copy your dataset locally (i.e., the local disk of the computing node).
# 3- Uncompress the dataset in the local folder.
# 4- Set data_folder with the local path.
# Reading data from the local disk of the compute node (e.g. $SLURM_TMPDIR with SLURM-based clusters) is very important.
# It allows you to read the data much faster without slowing down the shared filesystem.
data_folder: ./data
output_folder: ./results/4234
save_folder: ./results/4234/save
train_log: ./results/4234/train_log.txt

# Path where data manifest files will be stored
# The data manifest files are created by the data preparation script.
train_annotation: train.json
valid_annotation: valid.json
test_annotation: test.json

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: ./results/4234/train_log.txt

# FFT parameters
sample_rate: 16000
win_length: 32
hop_length: 16
n_fft: 512
window_fn: &id001 !name:torch.hamming_window

# Resynthesize combines noisy phase with enhanced magnitudes.

# Training Parameters
number_of_epochs: 20
batch_size: 8
learning_rate: 0.0001
dataloader_options:
  batch_size: 8

# The mask operates on log-spectral features, computed using these
# STFT parameters, as well as computing magnitude and log1p.
compute_STFT: &id002 !new:speechbrain.processing.features.STFT
  sample_rate: 16000
  win_length: 32
  hop_length: 16
  n_fft: 512
  window_fn: *id001
compute_ISTFT: &id003 !new:speechbrain.processing.features.ISTFT

# Added noise and reverb come from OpenRIR dataset, automatically
# downloaded and prepared with this Environmental Corruption class.
# The babble is generated from other utterances in each batch.
  sample_rate: 16000
  win_length: 32
  hop_length: 16
  window_fn: *id001
resynth: !name:speechbrain.processing.signal_processing.resynthesize
  stft: *id002
  istft: *id003
env_corruption: !new:speechbrain.lobes.augment.EnvCorrupt
  openrir_folder: ./data
  openrir_max_noise_len: 10
  noise_snr_low: 0
  noise_snr_high: 15
  babble_speaker_count: 7
  babble_snr_low: 0
  babble_snr_high: 15

# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined.
model: &id004 !new:custom_model.CustomModel

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
  input_size: 257

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: &id005 !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: 20

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  model: *id004
opt_class: !name:torch.optim.Adam
  lr: 0.0001

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: ./results/4234/save
  recoverables:
    model: *id004
    counter: *id005
